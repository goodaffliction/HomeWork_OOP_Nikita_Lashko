#pragma once
#include <cassert>

//Task 1--------------------------------------------

class ArrayInt
{
private:
    int m_length;
    int* m_data;

public:
    //Metods from lesson
    ArrayInt() : m_length(0), m_data(nullptr) { }

    ArrayInt(int length) : m_length(length) {
        assert(length >= 0);

        if (length > 0)
            m_data = new int[length];
        else
            m_data = nullptr;
    }

    void erase() {
        delete[] m_data;
        m_data = nullptr;
        m_length = 0;
    }

    int getLength() const { return m_length; }

    ~ArrayInt() {
        delete[] m_data;
    }

    int& operator[](int index) {
        assert(index >= 0 && index < m_length);
        return m_data[index];
    }

    void resize(int newLength) {
        if (newLength == m_length)
            return;

        if (newLength <= 0) {
            erase();
            return;
        }

        int* data = new int[newLength];

        if (m_length > 0) {
            int elementsToCopy = (newLength > m_length) ? m_length : newLength;
            for (int index = 0; index < elementsToCopy; ++index)
                data[index] = m_data[index];
        }

        delete[] m_data;
        m_data = data;
        m_length = newLength;
    }

    void insertBefore(int value, int index){
        assert(index >= 0 && index <= m_length);
        int* data = new int[m_length + 1];

        for (int before = 0; before < index; ++before)
            data[before] = m_data[before];
        data[index] = value;

        for (int after = index; after < m_length; ++after)
            data[after + 1] = m_data[after];

        delete[] m_data;
        m_data = data;
        ++m_length;
    }

    //My metods
    void deleteByData(int index) {
        assert(index >= 0 && index <= m_length);
        int* data = new int[m_length - 1];

        for (int before = 0; before < index; ++before)
            data[before] = m_data[before];

        for (int after = index + 1; after < m_length; ++after)
            data[after - 1] = m_data[after];

        delete[] m_data;
        m_data = data;
        --m_length;
    }

    void myPop_Front() {
        deleteByData(0);
    }

    void myPop_Back() {
        deleteByData(m_length - 1);
    }

    void sortArray() {
    for(int i = 1; i< m_length; i++)
        for (int j = 0; j < m_length - i; j++) {
            if (m_data[j] > m_data[j + 1]) {
                int temp = m_data[j];
                m_data[j] = m_data[j + 1];
                m_data[j + 1] = temp;
            }
        }
    }

    void fillArray() {
        for (int i = 0; i < getLength(); i++)
            m_data[i] = rand() % 100 + 1;
    }

    void printArray() {
        for (int i = 0; i < getLength(); i++)
            std::cout << m_data[i] << " ";
        std::cout << std::endl;
    }
};


//Task 3--------------------------------------------

enum point { ONE_P = 1, TWO_P = 2, THREE_P = 3, FOUR_P = 4, FIVE_P = 5, SIX_P = 6, SEVEN_P = 7, EIGHT_P = 8, NINE_P = 9, TEN_P = 10, ELEVEN_P = 11, NONE = 0 };
enum e_dignity { TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE, BACK };
enum e_suit { DIAMONDS, HEARTS, CLUBS, SPADES, UNKNOWN };

class bj_Card {
private:
    point c_point;
    e_dignity c_dignity;
    e_suit c_suit;
    bool c_state;

public:
    bj_Card(point p, e_dignity d, e_suit s, bool b) {
        c_point = p;
        c_dignity = d;
        c_suit = s;
        c_state = b;
    }
    void Flip() {
        if (c_dignity == BACK) {
            c_dignity = JACK;
            c_point = TEN_P;
            c_suit = DIAMONDS;
            c_state = true;
        }
        else {
            c_dignity = BACK;
            c_point = NONE;
            c_suit = UNKNOWN;
            c_state = false;
        }
    }
    point getValue() const {
        return c_point;
    }
    e_dignity getDignity() const {
        return c_dignity;
    }
};
class bj_Hand {
private:
    std::vector<bj_Card*> m_Cards;
public:
    void Add(bj_Card* pCard) {
        m_Cards.push_back(pCard);
    }

    void Clear() {
        m_Cards.clear();
    }

    int GetTotal() const {
        int sum = 0;

        for (int i = 0; i < m_Cards.size(); i++) {
            if (m_Cards[i]->getDignity() == ACE) {
                sum += ELEVEN_P;
                if (sum > 21) {
                    sum = sum - ELEVEN_P + ONE_P;
                }
            }
            else
                sum += m_Cards[i]->getValue();

        }
        return sum;
    }
};

